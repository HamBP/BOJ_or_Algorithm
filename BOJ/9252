#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>
#include <queue>
#include <string>
#include <cmath>
#include <set>
#include <map>
#include <numeric>
#include <functional>
#include <stack>
#include <math.h>
#include <assert.h>

using namespace std;

typedef long long ll;

int dx[] = { 0, 0, -1, 1, 1, 1, -1, -1 };
int dy[] = { -1, 1, 0, 0, -1, 1, 1, -1 };

const int INF = 987654321;

/* --- */

char a[1005], b[1005];
char result[1005];
int cache[1005][1005];

int dp(int l, int r, int cnt) {
    if (a[l] == '\0' || b[r] == '\0')
        return 0;

    int& ret = cache[l][r];
    if (ret != -1) 
        return ret;

    if (a[l] == b[r]) {
        return ret = 1 + dp(l + 1, r + 1, cnt + 1);
    }
    else {
        return ret = max(dp(l + 1, r, cnt), dp(l, r + 1, cnt));
    }
}

void findResult(int l, int r, int idx) {
    if (a[l] == '\0' || b[r] == '\0')
        return;

    if (a[l] == b[r]) {
        result[idx] = a[l];
        findResult(l + 1, r + 1, idx + 1);
    }
    else if (cache[l + 1][r] > cache[l][r + 1]) {
        findResult(l + 1, r, idx);
    }
    else {
        findResult(l, r + 1, idx);
    }
}

int main() {
    memset(cache, -1, sizeof(cache));

    cin >> a;
    cin >> b;

    int cnt = dp(0, 0, 0);
    cout << cnt << endl;
    if (cnt) {
        findResult(0, 0, 0);
        cout << result << endl;
    }

    return 0;
}
